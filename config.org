#+TITLE: Emacs Config
#+AUTHOR: Abraham Raji
#+EMAIL: avronr@tuta.io
#+STARTUP: overview
#+CREATOR: avronr
#+LANGUAGE: en
#+OPTIONS: num:nil
#+ATTR_HTML: style margin-left: auto; margin-right: auto;

* User Info
=user-full-name= returns the full name of the logged-in user or the value of the
environment variable =NAME=, if that is set. If the Emacs process’s user-id does
not correspond to any known user (and provided =NAME= is not set), the result 
is "unknown". If uid is non-nil, then it should be a number (a user-id) or a 
string (a login name). Then =user-full-name= returns the full name corresponding
to that user-id or login name. If you specify a user-id or login name that isn’t
defined, it returns =nil=.
=user-mail-address= holds the nominal email address of the user who is using 
Emacs. Emacs normally sets this variable to a default value after reading your 
init files, but not if you have already set it. So you can set the variable to 
some other value in your init file if you do not want to use the default value.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Abraham Raji"
  user-email "avronr@tuta.io")
#+END_SRC
* Set UTF-8 encoding
UTF-8 (UCS Transformation Format 8) is the World Wide Web's most common 
character encoding. Each character is represented by one to four bytes. UTF-8 is
backward-compatible with ASCII and can represent any standard Unicode character.
This is now a universal standard, so it makes sense for us to enable it by 
default in our text editor.
#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC
* Package Management
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC
* Multiplexing emacs and emacsclient
Opening a anew file in the same emacs-session requires the use of emacsclient. 
Emacs command can be itself wrapped to do the smarter job to open the file if 
the session exists. To start session you need to start-server. This snippet will
create server in first session of emacs. Add this to your emacs configuration 
file
#+BEGIN_SRC emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-start))
#+END_SRC
* Asynchronous Processing
async.el is a module for doing asynchronous processing in Emacs
#+BEGIN_SRC emacs-lisp
(straight-use-package 'async)
(require 'async)
(autoload 'dired-async-mode "dired-async.el" nil t)
(dired-async-mode 1)
#+END_SRC
=dired-async-mode= will allow you to run asynchronously the dired commands for 
copying, renaming and symlinking. If you are a helm user, this will allow you
to copy, rename etc... asynchronously from helm. Note that with helm you can
disable this by running the copy, rename etc... commands with a prefix argument.
If you don't want to make dired/helm asynchronous disable it with 
dired-async-mode =need to add support for auth-source library=
* Minor Conveniences
- First, let’s increase the cache before starting garbage collection:
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 50000000)
#+END_SRC
- Set custom settings to load in own file
This stops emacs adding customised settings to init.el. I try to avoid using 
customize anyway, preferring programmatic control of variables. Creating it as 
a temporary file effectively disables it (i.e. any changes are session local).
#+BEGIN_SRC emacs-lisp
(setq custom-file (make-temp-file "emacs-custom"))
#+END_SRC
#+END_SRC 
- Inhibit Startup Message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
- Found [[https://github.com/wasamasa/dotemacs/blob/master/init.org#init][here]] how to remove the warnings from the GnuTLS library when using HTTPS
increase the minimum prime bits size:
#+BEGIN_SRC emacs-lisp
(setq gnutls-min-prime-bits 4096)
#+END_SRC
- Disables Toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC
- Text wrapping
#+BEGIN_SRC emacs-lisp
(setq visual-line-mode t)
#+END_SRC
- Use y/n instead of yes/no
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
- make home and end buttons do their job
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<home>") 'move-begining-of-line)
(global-set-key (kbd "<end>") 'move-end-of-line)
#+END_SRC
- don't require two spaces for sentence end.
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC
- The beeping can be annoying--turn it off
#+BEGIN_SRC emacs-lisp
(setq visible-bell t
        ring-bell-function 'ignore)
#+END_SRC
- Start in fullscreen
#+BEGIN_SRC emacs-lisp
;(toggle-frame-fullscreen)
#+END_SRC
- Kill current buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x w") 'kill-current-buffer)
#+END_SRC
- Setting keybinding for eshell
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<M-return>") 'eshell)
#+END_SRC
* Relative Line numbers
#+BEGIN_SRC emacs-lisp
(straight-use-package `linum-relative)
(setq linum-relative-current-symbol "")
(add-hook 'prog-mode-hook 'linum-relative-mode)
(linum-relative-global-mode 1)
#+END_SRC
* Column Enforce Mode
#+BEGIN_SRC emacs-lisp
(straight-use-package
 '(column-enforce-mode :type git :host github :repo 
 "jordonbiondo/column-enforce-mode"))
(require 'column-enforce-mode)
(column-enforce-mode 1)
#+END_SRC
* Quickly visit certain files
As you keep using emacs or a specific desktop setup, you'll notice that you open 
certain files/folder more often than others, hence it's only sensible to set up 
key bindings that will open those specific files and save you the time of 
navigating through your file system.
- Emacs configuration
  #+BEGIN_SRC emacs-lisp
     (defun armacs/visit-emacs-config ()
     (interactive)
     (find-file "~/.emacs.d/config.org"))
     (global-set-key (kbd "C-c e") 'armacs/visit-emacs-config)
  #+END_SRC
- Resources
This is a habit of mine. Whenever a find some good material on a paricular topic 
I list it in this org file.A small description on what it is and a link to it. 
  #+BEGIN_SRC emacs-lisp
     (defun armacs/visit-resources ()
      (interactive)
      (find-file "~/Documents/Resources/resources.org"))
     (global-set-key (kbd "C-c r") 'armacs/visit-resources)
  #+END_SRC
- dotemacs
  I like to hoard good emacs configs. This org file lists them.
  #+BEGIN_SRC emacs-lisp
     (defun armacs/visit-dotemacs ()
     (interactive)
     (find-file "~/Documents/dotemacs/index.org"))
     (global-set-key (kbd "C-c d") 'armacs/visit-dotemacs)
  #+END_SRC
- Sway Config file
  #+BEGIN_SRC emacs-lisp
     (defun armacs/visit-swayconfig ()
     (interactive)
     (find-file "~/.config/sway/config"))
     (global-set-key (kbd "C-c s") 'armacs/visit-swayconfig)
  #+END_SRC
* Scrolling
-  System Scroll bars.
    #+BEGIN_SRC emacs-lisp
    (when (window-system)
      (tool-bar-mode 0)
      (when (fboundp 'horizontal-scroll-bar-mode)
        (horizontal-scroll-bar-mode -1))
      (scroll-bar-mode -1))
    #+END_SRC
  -  Mini-buffer Scroll bars.
    #+BEGIN_SRC emacs-lisp
   (set-window-scroll-bars (minibuffer-window) nil nil)
    #+END_SRC
  - Scroll Smoothly and Conservatively
   #+BEGIN_SRC emacs-lisp
     (setq scroll-conservatively 10000
           scroll-preserve-screen-position t)
   #+END_SRC
* Menu bar
  Toggles reveal and hide menubar with the f10 key
  #+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (defun my-menu-bar-open-after ()
  (remove-hook 'pre-command-hook 'my-menu-bar-open-after)
  (when (eq menu-bar-mode 42)
  (menu-bar-mode -1)))
  (defun my-menu-bar-open (&rest args)
  (interactive)
  (let ((open menu-bar-mode))
  (unless open
  (menu-bar-mode 1))
  (funcall 'menu-bar-open args)
  (unless open
  (setq menu-bar-mode 42)
  (add-hook 'pre-command-hook 'my-menu-bar-open-after))))
  (global-set-key [f10] 'my-menu-bar-open)
  #+END_SRC
* Backups
This is one of the things people usually want to change right away. By default, 
Emacs saves backup files in the current directory. These are the files ending 
in =~= that are cluttering up your directory lists. The following code stashes 
them all in =~/.emacs.d/backups=, where I can find them with =C-x C-f= 
(=find-file=) if I really need to.
#+begin_src emacs-lisp
(setq backup-directory-alist 
      '(("." . "~/.emacs.d/backups")))
;; autosave the undo-tree history
(setq undo-tree-history-directory-alist
      `((".*" . ,temporary-file-directory)))
#+end_src
 Disk space is cheap. Save lots.
 #+begin_src emacs-lisp
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
 #+end_src
* Enabling the clock
This turns on the clock globally.
#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
#+END_SRC
* Evil mode
** Installing Evil Mode
#+BEGIN_SRC emacs-lisp
(straight-use-package
 '(goto-chg :type git :host github :repo 
 "emacs-evil/goto-chg"))
(straight-use-package 'cl-lib)
(straight-use-package 'evil)
(evil-mode 1)
#+END_SRC
** Evil Leader
#+BEGIN_SRC emacs-lisp
(straight-use-package 'evil-leader)
(global-evil-leader-mode)
(evil-leader/set-leader "<SPC>")
(evil-leader/set-key
"f f" 'counsel-find-file
"f s" 'save-buffer
"g g" 'magit-status
"1" 'delete-other-windows
"o s t" 'org-insert-structure-template
"b" 'switch-to-buffer
"k" 'kill-current-buffer) 
#+END_SRC
